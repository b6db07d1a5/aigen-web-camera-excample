async function faceLiveness(args) {
  let attempt = 0
  let maxAttempt = 3

  await sleep(3000)

  const { camera } = args

  const firstImage = cameraCapture(camera)

  ;(async () => {
    let result

    while (attempt < maxAttempt) {
      attempt++
      result = await doProcess(args)
      result.attempt = attempt
      result.face = firstImage

      if (result.isAlive) {
        break
      }
    }

    args.finishCallback(result)
  })()

  async function doProcess(args) {
    const { getSequence, postLiveness, faceTracing, camera } = args

    const { request_id, next_choice } = await getSequence()

    faceTracing(next_choice)

    let frame = 0
    let maxFrame = 10 //process frame per choice
    let isAlive = false

    function setSetFrame() {
      frame = 0
    }

    function setAlive(alive) {
      isAlive = alive
    }

    while (frame < maxFrame) {
      const image = cameraCapture(camera)

      try {
        const { result, status, next_choice } = await postLiveness({
          image,
          request_id,
        })

        if (status === 'completed') {
          setAlive(true)
          //faceTracing(status)

          break
        }

        if (result === 'Yes' && status === 'processing') {
          await sleep(1500)
          setSetFrame()
          faceTracing(next_choice)
        }

        if (result === 'No' && status === 'processing') {
          await sleep(1500)
          faceTracing(next_choice)
        }
      } catch (error) {
        console.log(error)
      }

      frame++
    }

    return { isAlive }
  }
}

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms))
}

function cameraCapture(video) {
  let canvas = document.createElement('canvas')
  canvas.width = width
  canvas.height = height

  canvas.getContext('2d').drawImage(video, 0, 0, canvas.width, canvas.height)

  //base64 data for server side **due to security issue, please encrypt base64 with any secret key before send
  return canvas.toDataURL('image/jpeg').replace(/^data:image\/jpeg;base64,/, '')
}

const actions = {
  Turn_left: { text: 'р╕лр╕▒р╕Щр╕лр╕Щр╣Йр╕▓р╕Фр╣Йр╕▓р╕Щр╕Лр╣Йр╕▓р╕в', emo: 'ЁЯзС' },
  Turn_right: { text: 'р╕лр╕▒р╕Щр╕лр╕Щр╣Йр╕▓р╕Фр╣Йр╕▓р╕Щр╕Вр╕зр╕▓', emo: 'ЁЯзС' },
  Look_up: { text: 'р╕лр╕▒р╕Щр╕лр╕Щр╣Йр╕▓р╕Вр╕╢р╣Йр╕Щр╕Фр╣Йр╕▓р╕Щр╕Ър╕Щ', emo: 'ЁЯзС' },
  Look_down: { text: 'р╕лр╕▒р╕Щр╕лр╕Щр╣Йр╕▓р╕ер╕Зр╕Фр╣Йр╕▓р╕Щр╕ер╣Ир╕▓р╕З', emo: 'ЁЯзС' },
  Open_mouth: { text: 'р╕Бр╕гр╕╕р╕Ур╕▓р╕нр╣Йр╕▓р╕Ыр╕▓р╕Б', emo: 'ЁЯСД' },
  Smile: { text: 'р╣Бр╕кр╕Фр╕Зр╣Гр╕Ър╕лр╕Щр╣Йр╕▓р╕вр╕┤р╣Йр╕б', emo: 'ЁЯШГ' },
  Like_right_hand: { text: 'р╕вр╕Бр╕Щр╕┤р╣Йр╕зр╣Гр╕лр╣Йр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯСН' },
  Like_left_hand: { text: 'р╕вр╕Бр╕Щр╕┤р╣Йр╕зр╣Гр╕лр╣Йр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'ЁЯСН' },
  I_love_you_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕зр╣Ир╕▓р╕Йр╕▒р╕Щр╕гр╕▒р╕Бр╕Др╕╕р╕Ур╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯдЯ' },
  I_love_you_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕зр╣Ир╕▓р╕Йр╕▒р╕Щр╕гр╕▒р╕Бр╕Др╕╕р╕Ур╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'ЁЯдЯ' },
  Ok_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╣Вр╕нр╣Ар╕Др╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯСМ' },
  Ok_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╣Ар╕Др╕гр╕╖р╣Ир╕нр╕Зр╕лр╕бр╕▓р╕вр╣Вр╕нр╣Ар╕Др╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯСМ' },
  Handful_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕Бр╕│р╕Ыр╕▒р╣Йр╕Щр╕Вр╕зр╕▓', emo: 'тЬК' },
  Handful_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕Бр╕│р╕Ыр╕▒р╣Йр╕Щр╕Лр╣Йр╕▓р╕в', emo: 'тЬК' },
  One_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕лр╕Щр╕╢р╣Ир╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тШЭя╕П' },
  One_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕лр╕Щр╕╢р╣Ир╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тШЭя╕П' },
  Two_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕нр╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тЬМя╕П' },
  Two_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕нр╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тЬМя╕П' },
  Three_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕▓р╕бр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тЬЛ' },
  Three_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕▓р╕бр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тЬЛ' },
  Four_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕╡р╣Ир╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тЬЛ' },
  Four_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕╡р╣Ир╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тЬЛ' },
  Forehand_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕Фр╣Йр╕▓р╕Щр╕лр╕Щр╣Йр╕▓р╕Вр╕нр╕Зр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тЬЛ' },
  Forehand_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕Фр╣Йр╕▓р╕Щр╕лр╕Щр╣Йр╕▓р╕Вр╕нр╕Зр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тЬЛ' },
  Backhand_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕лр╕ер╕▒р╕Зр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯдЪ' },
  Backhand_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕лр╕ер╕▒р╕Зр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'ЁЯдЪ' },
  Victory_right_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕▒р╕Нр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╕кр╕нр╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'тЬМя╕П' },
  Victory_left_hand: { text: 'р╣Бр╕кр╕Фр╕Зр╕кр╕▒р╕Нр╕ер╕▒р╕Бр╕йр╕Ур╣Мр╕кр╕нр╕Зр╕Щр╕┤р╣Йр╕зр╕Фр╣Йр╕зр╕вр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'тЬМя╕П' },
  Right_hand: { text: 'р╕вр╕Бр╕бр╕╖р╕нр╕Вр╕зр╕▓', emo: 'ЁЯдЪ' },
  Left_hand: { text: 'р╕вр╕Бр╕бр╕╖р╕нр╕Лр╣Йр╕▓р╕в', emo: 'ЁЯдЪ' },
}
